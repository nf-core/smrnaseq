/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/



process {

    //
    // General configuration options
    //
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    //
    // Input preparation
    //
    withName: 'NFCORE_SMRNASEQ:INPUT_CHECK:SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'CAT_FASTQ' {
        publishDir = [
            path: { "${params.outdir}/cat_fastq" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq',
            enabled: params.save_merged
        ]
    }

    withName: '.*:PREPARE_GENOME:UNTAR_BOWTIE_INDEX' {
        publishDir = [
            mode: params.publish_dir_mode,
            enabled: params.save_intermediates,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //
    // FASTQ_FASTQC_UMITOOLS_FASTP
    //
    withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTP' {
        ext.args = [ "",
            params.trim_fastq                           ? "" : "--disable_adapter_trimming",
            params.clip_r1 > 0                          ? "--trim_front1 ${params.clip_r1}" : "", // Remove bp from the 5' end of read 1.
            params.fastp_min_length > 0                 ? "-l ${params.fastp_min_length}" : "",
            params.fastp_max_length > 0                 ? "--max_len1 ${params.fastp_max_length}" : "",
            params.three_prime_adapter == "auto-detect" ?  "" : "--adapter_sequence ${params.three_prime_adapter}"
        ].join(" ").trim()
        publishDir = [
            [
                path: { "${params.outdir}/fastp/on_raw" },
                mode: params.publish_dir_mode,
                pattern: "*.{json,html}"
            ],
            [
                path: { "${params.outdir}/fastp/on_raw/log" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/fastp/on_raw" },
                mode: params.publish_dir_mode,
                pattern: "*.fail.fastq.gz",
                enabled: params.save_trimmed_fail
            ],
            [
                path: { "${params.outdir}/fastp/fastq" },
                mode: params.publish_dir_mode,
                pattern: "*.fastp.fastq.gz",
                enabled: params.save_merged
            ]
        ]
    }
    //
    // FASTQ_FASTQC_UMITOOLS_FASTP
    //
    withName: '.*:FASTP3' {
        ext.prefix =  { "${meta.id}.fastp3" }
        ext.args = [ "",
            "--disable_adapter_trimming",
            "--disable_quality_filtering",
            params.three_prime_clip_r1 > 0              ? "--trim_tail1 ${params.three_prime_clip_r1}" : "", // Remove bp from the 3' end of read 1 AFTER adapter/quality trimming has been performed.
            params.fastp_min_length > 0                 ? "-l ${params.fastp_min_length}" : "",
            params.fastp_max_length > 0                 ? "--max_len1 ${params.fastp_max_length}" : "",
        ].join(" ").trim()
        publishDir = [
            [
                path: { "${params.outdir}/fastp/on_raw" },
                mode: params.publish_dir_mode,
                pattern: "*.{json,html}"
            ],
            [
                path: { "${params.outdir}/fastp/on_raw/log" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ]
        ]
    }
    withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTQC_RAW' {
        //the prefix is required for multiqc to pickup the files separately from the other fastqc instances
        ext.prefix =  { "${meta.id}.raw" }
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/fastqc/raw" },
            mode: params.publish_dir_mode,
            enabled: params.save_intermediates,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTQC_TRIM' {
        ext.prefix =  { "${meta.id}.trim" }
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/fastqc/trimmed" },
            mode: params.publish_dir_mode,
            enabled: params.save_intermediates,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //
    // FASTP LENGTH FILTER
    //
    withName: 'FASTP_LENGTH_FILTER' {
        ext.args = [ "",
            "--disable_adapter_trimming",
            "--disable_quality_filtering",
            params.clip_r1 > 0             ? "--trim_front1 ${params.clip_r1}" : "", // Remove bp from the 5' end of read 1.
            params.three_prime_clip_r1 > 0 ? "--trim_tail1 ${params.three_prime_clip_r1}" : "", // Remove bp from the 3' end of read 1 AFTER adapter/quality trimming has been performed.
            params.fastp_min_length > 0    ? "-l ${params.fastp_min_length}" : ""
        ].join(" ").trim()
        publishDir = [
            [
                path: { "${params.outdir}/fastp/on_umi_extracted" },
                mode: params.publish_dir_mode,
                pattern: "*.{json,html}"
            ],
            [
                path: { "${params.outdir}/fastp/on_umi_extracted/log" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/fastp/on_umi_extracted" },
                mode: params.publish_dir_mode,
                pattern: "*.fail.fastq.gz",
                enabled: params.save_trimmed_fail
            ]
        ]
    }

    //
    // Make bowtie index
    //
    withName: 'INDEX_GENOME' {
        publishDir = [
            path: { "${params.outdir}/bowtie_index/genome" },
            mode: params.publish_dir_mode,
            enabled: params.save_intermediates,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CLEAN_FASTA' {
        ext.args = "-c fastx '{gsub(/[^ATGCatgc]/, \"N\", \$seq); sub(/ .*/, \"\", \$name); print \">\"\$name\"\\n\"\$seq}'"
        ext.prefix = {"${meta.id}_clean.fa"}
        publishDir = [
            path: { "${params.outdir}/bowtie_index/genome" },
            mode: params.publish_dir_mode,
            enabled: params.save_intermediates,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //
    // UMI deduplication
    //

    withName: '.*:UMICOLLAPSE_FASTQ' {
        ext.args = { meta.single_end ? "--algo ${params.umitools_method} --two-pass" : "--algo ${params.umitools_method} --two-pass --paired --remove-unpaired --remove-chimeric" }
        ext.prefix = { "${meta.id}.umi_dedup.sorted" }
        publishDir = [
            path: { "${params.outdir}/umi_dedup/bam_deduplicated" },
            mode: params.publish_dir_mode,
            pattern: '*.{bam,fastq.gz}',
            enabled: (
                params.save_umi_intermeds
            )
        ]
    }

    withName: 'UMITOOLS_EXTRACT' {
        ext.args  = [
            params.umitools_extract_method ? "--extract-method=${params.umitools_extract_method}" : '',
            params.umitools_bc_pattern     ? "--bc-pattern='${params.umitools_bc_pattern}'" : '',
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/umi_dedup/fastq_extracted_umi" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/umi_dedup/fastq_extracted_umi" },
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz",
                enabled: params.save_umi_intermeds
            ]
        ]
    }

    //
    // MIRTRACE QC
    //
    withName: 'MIRTRACE_QC' {
        publishDir = [
            path: { "${params.outdir}/mirtrace/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //
    // CONTAMINANT_FILTER
    //
    withName: 'NFCORE_SMRNASEQ:CONTAMINANT_FILTER:.*' {
        publishDir = [
            path: { "${params.outdir}/contaminant_filter/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NFCORE_SMRNASEQ:CONTAMINANT_FILTER:BLAT.*' {
        ext.args = '-out=blast8'
        ext.prefix = {"${meta.id}_${meta2.id}"}
        tag = {"${meta.id} ${meta2.id}"}
        publishDir = [ enabled: false ]
    }

    withName: 'NFCORE_SMRNASEQ:CONTAMINANT_FILTER:GAWK.*' {
        ext.prefix = {"significant_hits_${meta.id}"}
        publishDir = [ enabled: false ]
    }

    withName: 'NFCORE_SMRNASEQ:CONTAMINANT_FILTER:SEQKIT_GREP.*' {
        ext.prefix = {"filtered_${meta.id}"}
        ext.args = '-v'
        publishDir = [ enabled: false ]
    }

    withName: 'NFCORE_SMRNASEQ:CONTAMINANT_FILTER:BOWTIE2_ALIGN.*' {
        ext.args = '--very-sensitive-local -k 1'
        ext.prefix = {"${meta.contaminant}_${meta.id}"}
        publishDir = [ enabled: false ]
    }

    withName: 'NFCORE_SMRNASEQ:CONTAMINANT_FILTER:STATS_GAWK_RRNA' {
        ext.prefix = {"${meta.contaminant}_${meta.id}"}
        ext.suffix = "stats"
        ext.args2 = '\'BEGIN {tot=0} {if(NR==4 || NR==5){tot+=\$1}} END {print "\\"' + "rRNA" + '\\": " tot}\''
        publishDir = [ enabled: false ]
    }

    withName: 'NFCORE_SMRNASEQ:CONTAMINANT_FILTER:STATS_GAWK_TRNA' {
        ext.prefix = {"${meta.contaminant}_${meta.id}"}
        ext.suffix = "stats"
        ext.args2 = '\'BEGIN {tot=0} {if(NR==4 || NR==5){tot+=\$1}} END {print "\\"' + "tRNA" + '\\": " tot}\''
        publishDir = [ enabled: false ]
    }

    withName: 'NFCORE_SMRNASEQ:CONTAMINANT_FILTER:STATS_GAWK_CDNA' {
        ext.prefix = {"${meta.contaminant}_${meta.id}"}
        ext.suffix = "stats"
        ext.args2 = '\'BEGIN {tot=0} {if(NR==4 || NR==5){tot+=\$1}} END {print "\\"' + "cDNA" + '\\": " tot}\''
        publishDir = [ enabled: false ]
    }
        withName: 'NFCORE_SMRNASEQ:CONTAMINANT_FILTER:STATS_GAWK_NCRNA' {
        ext.prefix = {"${meta.contaminant}_${meta.id}"}
        ext.suffix = "stats"
        ext.args2 = '\'BEGIN {tot=0} {if(NR==4 || NR==5){tot+=\$1}} END {print "\\"' + "ncRNA" + '\\": " tot}\''
        publishDir = [ enabled: false ]
    }

    withName: 'NFCORE_SMRNASEQ:CONTAMINANT_FILTER:STATS_GAWK_PIRNA' {
        ext.prefix = {"${meta.contaminant}_${meta.id}"}
        ext.suffix = "stats"
        ext.args2 = '\'BEGIN {tot=0} {if(NR==4 || NR==5){tot+=\$1}} END {print "\\"' + "piRNA" + '\\": " tot}\''
        publishDir = [ enabled: false ]
    }

    withName: 'NFCORE_SMRNASEQ:CONTAMINANT_FILTER:STATS_GAWK_OTHER' {
        ext.prefix = {"${meta.contaminant}_${meta.id}"}
        ext.suffix = "stats"
        ext.args2 = '\'BEGIN {tot=0} {if(NR==4 || NR==5){tot+=\$1}} END {print "\\"' + "other" + '\\": " tot}\''
        publishDir = [ enabled: false ]
    }

    withName: 'NFCORE_SMRNASEQ:CONTAMINANT_FILTER:FILTER_STATS' {
        publishDir = [
            path: { "${params.outdir}/contaminant_filter/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            enabled: params.save_intermediates,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //
    // MIRNA_QUANT
    //
    withName: 'NFCORE_SMRNASEQ:MIRNA_QUANT:FORMAT_.*' {
        publishDir = [
            path: { "${params.outdir}/mirna_quant/reference" },
            mode: params.publish_dir_mode,
            enabled: params.save_intermediates,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'NFCORE_SMRNASEQ:MIRNA_QUANT:PARSE_.*' {
        publishDir = [
            path: { "${params.outdir}/mirna_quant/reference" },
            mode: params.publish_dir_mode,
            enabled: params.save_intermediates,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'NFCORE_SMRNASEQ:MIRNA_QUANT:INDEX_MATURE' {
        publishDir = [
            path: { "${params.outdir}/bowtie_index/mirna_mature" },
            mode: params.publish_dir_mode,
            enabled: params.save_intermediates,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'NFCORE_SMRNASEQ:MIRNA_QUANT:INDEX_HAIRPIN' {
        publishDir = [
            path: { "${params.outdir}/bowtie_index/mirna_hairpin" },
            mode: params.publish_dir_mode,
            enabled: params.save_intermediates,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'NFCORE_SMRNASEQ:MIRNA_QUANT:BOWTIE_MAP_MATURE' {
        ext.args = [ "",
            "-t",
            "-k 50",
            "--best",
            "--strata",
            "-e 99999",
            "--chunkmbs 2048",
        ].join(" ").trim()
        publishDir = [
            path: { "${params.outdir}/mirna_quant/bam/mature" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }
    withName: 'NFCORE_SMRNASEQ:MIRNA_QUANT:BAM_STATS_MATURE:.*' {
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/mirna_quant/bam/mature" },
            mode: params.publish_dir_mode,
            enabled: params.save_intermediates,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'NFCORE_SMRNASEQ:MIRNA_QUANT:BOWTIE_MAP_HAIRPIN' {
        ext.args = [ "",
            "-t",
            "-k 50",
            "--best",
            "--strata",
            "-e 99999",
            "--chunkmbs 2048",
        ].join(" ").trim()
        publishDir = [
            path: { "${params.outdir}/mirna_quant/bam/hairpin" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }
    withName: 'NFCORE_SMRNASEQ:MIRNA_QUANT:BAM_STATS_HAIRPIN:.*' {
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/mirna_quant/bam/hairpin" },
            mode: params.publish_dir_mode,
            enabled: params.save_intermediates,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'EDGER_QC' {
        publishDir = [
            path: { "${params.outdir}/mirna_quant/edger_qc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SEQCLUSTER_COLLAPSE' {
        publishDir = [
            path: { "${params.outdir}/mirna_quant/seqcluster" },
            mode: params.publish_dir_mode,
            enabled: params.save_intermediates,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args    = "-m 1 --min_size 15"
        ext.prefix  = {"${meta.id}_seqcluster"}
    }
    withName: 'NFCORE_SMRNASEQ:MIRNA_QUANT:BOWTIE_MAP_SEQCLUSTER' {
        ext.args = [ "",
            "-t",
            "-k 50",
            "--best",
            "--strata",
            "-e 99999",
            "--chunkmbs 2048",
        ].join(" ").trim()
        publishDir = [
            path: { "${params.outdir}/mirna_quant/bam/seqcluster" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }


    // Mirtop

    withName: 'NFCORE_SMRNASEQ:MIRNA_QUANT:BAM_STATS_MIRNA_MIRTOP:.*' {
        publishDir = [
            path: { "${params.outdir}/mirna_quant/mirtop" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NFCORE_SMRNASEQ:MIRNA_QUANT:BAM_STATS_MIRNA_MIRTOP:MIRTOP_COUNTS' {
        ext.args = '--add-extra'
        publishDir = [ enabled: false ]
    }

    withName: 'NFCORE_SMRNASEQ:MIRNA_QUANT:BAM_STATS_MIRNA_MIRTOP:MIRTOP_STATS' {
        publishDir = [ enabled: false ]
    }

    withName: 'NFCORE_SMRNASEQ:MIRNA_QUANT:BAM_STATS_MIRNA_MIRTOP:MIRTOP_GFF' {
        publishDir = [
            path: { "${params.outdir}/mirna_quant/mirtop/gff" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NFCORE_SMRNASEQ:MIRNA_QUANT:CSVTK_JOIN' {
        ext.args = "--fields 'UID,Read,miRNA,Variant,iso_5p,iso_3p,iso_add3p,iso_snp,iso_5p_nt,iso_3p_nt,iso_add3p_nt,iso_snp_nt' --tabs --outer-join --na \"0\" --out-delimiter \"\t\""
        ext.prefix = "joined_samples_mirtop"
        publishDir = [
            path: { "${params.outdir}/mirna_quant/mirtop" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: 'NFCORE_SMRNASEQ:MIRNA_QUANT:DATATABLE_MERGE' {
        publishDir = [
            path: { "${params.outdir}/mirna_quant/mirtop" },
            mode: params.publish_dir_mode,
            pattern: "*.tsv"
        ]
    }



    //
    // GENOME_QUANT
    //
    withName: 'NFCORE_SMRNASEQ:GENOME_QUANT:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_.*' {
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/genome_quant/bam" },
            mode: params.publish_dir_mode,
            enabled: params.save_intermediates,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_INDEX' {
        ext.args = '-c'
        publishDir = [
            enabled: params.save_intermediates,
        ]
    }

    withName: 'NFCORE_SMRNASEQ:GENOME_QUANT:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/genome_quant/bam" },
            mode: params.publish_dir_mode,
            pattern: "*.{stats,flagstat,idxstats}"
        ]
    }
    withName: 'NFCORE_SMRNASEQ:GENOME_QUANT:BOWTIE_MAP_GENOME' {
        ext.args = [ "",
            "-t",
            "-k 50",
            "--best",
            "--strata",
            "-e 99999",
            "--chunkmbs 2048",
        ].join(" ").trim()
        publishDir = [
            path: { "${params.outdir}/genome_quant/bam" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }


    //
    // MIRDEEP
    //

    withName: 'MIRDEEP2_MAPPER' {
        ext.args = "-c -j -m -v"
        publishDir = [ enabled: false ]
    }

    withName: 'SEQKIT_REPLACE' {
        ext.args = '-p "\\s+|\\." -w 0'
        ext.suffix        = "fasta"
        publishDir = [ enabled: false ]
    }

    withName: 'SEQKIT_FQ2FA' {
        publishDir = [ enabled: false ]
    }

    withName: 'MIRDEEP2_MIRDEEP2' {
        errorStrategy = { task.exitStatus in (255) ? 'ignore' : '' }
    }

    //
    // reports
    //

    withName: 'MULTIQC' {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
