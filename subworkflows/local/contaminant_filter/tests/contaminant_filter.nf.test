nextflow_workflow {

    name "Test Workflow CONTAMINANT_FILTER"
    script "../contaminant_filter.nf"
    config "./nextflow.config"
    workflow "CONTAMINANT_FILTER"
    tag "subworkflows"
    tag "subworkflows_local"
    tag "subworkflows/contaminant_filter"
    tag "contaminant_filter"

    test("Should remove other contaminants") {

        when {
            params {
                outdir = "${outputDir}"
            }
            workflow {
                """
                input[0] =  [file("https://github.com/nf-core/test-datasets/raw/smrnaseq/miRBase/hairpin.fa", checkIfExists: true)]
                input[1] =  []
                input[2] =  []
                input[3] =  []
                input[4] =  []
                input[5] =  []
                input[6] =  [file("https://huggingface.co/datasets/nf-core/smrnaseq/resolve/main/GRCh37/Homo_sapiens.GRCh37.ncrna.fa", checkIfExists: true)]
                input[7] =  Channel.of([['id':'Clone1_N1', 'single_end':true], file("https://github.com/nf-core/test-datasets/raw/smrnaseq/nf-test_data/contaminant_filter/small_Clone1_N1.tRNA.filter.unmapped.contaminant.fastq", checkIfExists: true)])
                """
            }
        }

        then {
            assert workflow.success
            assert path(workflow.out.filtered_reads.get(0).get(1)).linesGzip.contains("@M07660:69:000000000-KDJ4R:1:1102:18200:10888 1:N:0:ACAGTG")
            assert workflow.out.filtered_reads
        }

    }

    test("Should remove tRNA contaminants") {

        when {
            params {
                outdir = "${outputDir}"
            }
            workflow {
                """
                input[0] =  [file("https://github.com/nf-core/test-datasets/raw/smrnaseq/miRBase/hairpin.fa", checkIfExists: true)]
                input[1] =  []
                input[2] =  [file("https://huggingface.co/datasets/nf-core/smrnaseq/resolve/main/GRCh37/hg19-tRNAs.fa")]
                input[3] =  []
                input[4] =  []
                input[5] =  []
                input[6] =  []
                input[7] =  Channel.of([['id':'Clone1_N1', 'single_end':true], file("https://github.com/nf-core/test-datasets/raw/smrnaseq/nf-test_data/contaminant_filter/small_Clone1_N1.tRNA.filter.unmapped.contaminant.fastq", checkIfExists: true)])
                """
            }
        }

        then {
            assert workflow.success
            assert path(workflow.out.filtered_reads.get(0).get(1)).linesGzip.contains("@M07660:69:000000000-KDJ4R:1:1102:18200:10888 1:N:0:ACAGTG")
            assert workflow.out.filtered_reads
        }

    }

    test("Should remove ncRNA contaminants") {

        when {
            params {
                outdir = "${outputDir}"
            }
            workflow {
                """
                input[0] =  [file("https://github.com/nf-core/test-datasets/raw/smrnaseq/miRBase/hairpin.fa", checkIfExists: true)]
                input[1] =  []
                input[2] =  []
                input[3] =  []
                input[4] =  [file("https://huggingface.co/datasets/nf-core/smrnaseq/resolve/main/GRCh37/Homo_sapiens.GRCh37.ncrna.fa")]
                input[5] =  []
                input[6] =  []
                input[7] =  Channel.of([['id':'Clone1_N1', 'single_end':true], file("https://github.com/nf-core/test-datasets/raw/smrnaseq/nf-test_data/contaminant_filter/small_Clone1_N1.tRNA.filter.unmapped.contaminant.fastq", checkIfExists: true)])
                """
            }
        }

        then {
            assert workflow.success
            assert path(workflow.out.filtered_reads.get(0).get(1)).linesGzip.contains("@M07660:69:000000000-KDJ4R:1:1102:18200:10888 1:N:0:ACAGTG")
            assert workflow.out.filtered_reads
        }

    }

}
