
nextflow_pipeline {

    name "Test Workflow main.nf - test_contamination_tech_reps"
    script "main.nf"
    profile "test_contamination_tech_reps"
    tag "test_contamination_tech_reps"
    tag "contamination"
    tag "pipeline"

    test("test_contamination_tech_reps") {

        when {
            params {
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(UTILS.removeNextflowVersion("$outputDir")).match("software_versions") },
                { assert workflow.trace.succeeded().size() == 100 },

                { assert snapshot(
                    path("$outputDir/contaminant_filter/filter/Clone1_N1_trimmed.contamination_mqc.yaml").exists(), //TODO see if we can make these deterministic or why they are non-deterministic
                    path("$outputDir/contaminant_filter/filter/Clone1_N3_trimmed.contamination_mqc.yaml").exists(),
                    path("$outputDir/contaminant_filter/filter/Clone1_N1.contamination_mqc.yaml").exists()
                ).match("contaminant_filter_filter") },

                { assert snapshot(
                    path("$outputDir/mirna_quant/bam/mature/Clone1_N3_trimmed_mature.sorted.stats").exists(),
                    path("$outputDir/mirna_quant/bam/mature/Clone1_N1_mature.sorted.stats").exists(),
                    path("$outputDir/mirna_quant/bam/mature/Clone1_N3_trimmed_mature.sorted.idxstats").exists(),
                    path("$outputDir/mirna_quant/bam/mature/Clone1_N3_trimmed_mature.sorted.flagstat").exists(),
                    path("$outputDir/mirna_quant/bam/mature/Clone1_N1_trimmed_mature.sorted.idxstats").exists(),
                    path("$outputDir/mirna_quant/bam/mature/Clone1_N1_mature.sorted.flagstat").exists(),
                    path("$outputDir/mirna_quant/bam/mature/Clone1_N1_trimmed_mature.sorted.flagstat").exists(),
                    path("$outputDir/mirna_quant/bam/mature/Clone1_N1_mature.sorted.idxstats").exists(),
                    path("$outputDir/mirna_quant/bam/mature/Clone1_N1_trimmed_mature.sorted.stats").exists(),
                    path("$outputDir/mirna_quant/bam/hairpin/Clone1_N1_mature_hairpin.sorted.flagstat").exists(),
                    path("$outputDir/mirna_quant/bam/hairpin/Clone1_N1_trimmed_mature_hairpin.sorted.flagstat").exists(),
                    path("$outputDir/mirna_quant/bam/hairpin/Clone1_N3_trimmed_mature_hairpin.sorted.flagstat").exists(),
                    path("$outputDir/mirna_quant/bam/hairpin/Clone1_N1_trimmed_mature_hairpin.sorted.stats").exists(),
                    path("$outputDir/mirna_quant/bam/hairpin/Clone1_N1_trimmed_mature_hairpin.sorted.idxstats").exists(),
                    path("$outputDir/mirna_quant/bam/hairpin/Clone1_N3_trimmed_mature_hairpin.sorted.stats").exists(),
                    path("$outputDir/mirna_quant/bam/hairpin/Clone1_N3_trimmed_mature_hairpin.sorted.idxstats").exists(),
                    path("$outputDir/mirna_quant/bam/hairpin/Clone1_N1_mature_hairpin.sorted.stats").exists(),
                    path("$outputDir/mirna_quant/bam/hairpin/Clone1_N1_mature_hairpin.sorted.idxstats").exists()
                ).match("mirna_quant_bam") },

                { assert snapshot(
                    path("$outputDir/mirna_quant/edger_qc/hairpin_edgeR_MDS_distance_matrix.txt").exists(),
                    path("$outputDir/mirna_quant/edger_qc/hairpin_counts.csv").exists(),
                    path("$outputDir/mirna_quant/edger_qc/hairpin_edgeR_MDS_plot_coordinates.txt").exists(),
                    path("$outputDir/mirna_quant/edger_qc/hairpin_log2CPM_sample_distances.txt").exists(),
                    path("$outputDir/mirna_quant/edger_qc/mature_counts.csv").exists(),
                    path("$outputDir/mirna_quant/edger_qc/hairpin_normalized_CPM.txt").exists(),
                    path("$outputDir/mirna_quant/edger_qc/hairpin_logtpm.csv").exists(),
                    path("$outputDir/mirna_quant/edger_qc/hairpin_unmapped_read_counts.txt").exists(),
                    path("$outputDir/mirna_quant/edger_qc/mature_edgeR_MDS_plot_coordinates.txt").exists(),
                    path("$outputDir/mirna_quant/edger_qc/hairpin_logtpm.txt").exists(),
                    path("$outputDir/mirna_quant/edger_qc/mature_edgeR_MDS_distance_matrix.txt").exists(),
                    path("$outputDir/mirna_quant/edger_qc/mature_logtpm.txt").exists(),
                    path("$outputDir/mirna_quant/edger_qc/mature_normalized_CPM.txt").exists(),
                    path("$outputDir/mirna_quant/edger_qc/mature_logtpm.csv").exists(),
                    path("$outputDir/mirna_quant/edger_qc/mature_log2CPM_sample_distances.txt").exists(),
                    path("$outputDir/mirna_quant/edger_qc/mature_unmapped_read_counts.txt").exists()
                ).match("mirna_quant_edger_qc") },

                { assert snapshot(
                    path("$outputDir/mirna_quant/mirtop/joined_samples_mirtop.tsv").exists(),
                    path("$outputDir/mirna_quant/mirtop/mirna.tsv").exists(),
                ).match("mirna_quant_mirtop") },

                { assert snapshot(
                    path("$outputDir/mirtrace/Clone1_N1/mirtrace-report.html").exists(),
                    path("$outputDir/mirtrace/Clone1_N1/mirtrace-stats-contamination_detailed.tsv"),
                    path("$outputDir/mirtrace/Clone1_N1/mirtrace-stats-contamination_basic.tsv"),
                    path("$outputDir/mirtrace/Clone1_N1/mirtrace-stats-length.tsv"),
                    path("$outputDir/mirtrace/Clone1_N1/mirtrace-stats-mirna-complexity.tsv"),
                    path("$outputDir/mirtrace/Clone1_N1/mirtrace-stats-phred.tsv"),
                    path("$outputDir/mirtrace/Clone1_N1/mirtrace-stats-qcstatus.tsv"),
                    path("$outputDir/mirtrace/Clone1_N1/mirtrace-stats-rnatype.tsv"),
                    path("$outputDir/mirtrace/Clone1_N1_trimmed/mirtrace-report.html").exists(),
                    path("$outputDir/mirtrace/Clone1_N1_trimmed/mirtrace-stats-contamination_detailed.tsv"),
                    path("$outputDir/mirtrace/Clone1_N1_trimmed/mirtrace-stats-contamination_basic.tsv"),
                    path("$outputDir/mirtrace/Clone1_N1_trimmed/mirtrace-stats-length.tsv"),
                    path("$outputDir/mirtrace/Clone1_N1_trimmed/mirtrace-stats-mirna-complexity.tsv"),
                    path("$outputDir/mirtrace/Clone1_N1_trimmed/mirtrace-stats-phred.tsv"),
                    path("$outputDir/mirtrace/Clone1_N1_trimmed/mirtrace-stats-qcstatus.tsv"),
                    path("$outputDir/mirtrace/Clone1_N1_trimmed/mirtrace-stats-rnatype.tsv"),
                    path("$outputDir/mirtrace/Clone1_N3_trimmed/mirtrace-report.html").exists(),
                    path("$outputDir/mirtrace/Clone1_N3_trimmed/mirtrace-stats-contamination_detailed.tsv"),
                    path("$outputDir/mirtrace/Clone1_N3_trimmed/mirtrace-stats-contamination_basic.tsv"),
                    path("$outputDir/mirtrace/Clone1_N3_trimmed/mirtrace-stats-length.tsv"),
                    path("$outputDir/mirtrace/Clone1_N3_trimmed/mirtrace-stats-mirna-complexity.tsv"),
                    path("$outputDir/mirtrace/Clone1_N3_trimmed/mirtrace-stats-phred.tsv"),
                    path("$outputDir/mirtrace/Clone1_N3_trimmed/mirtrace-stats-qcstatus.tsv"),
                    path("$outputDir/mirtrace/Clone1_N3_trimmed/mirtrace-stats-rnatype.tsv")
                ).match("mirtrace") }
            )
        }
    }

}
